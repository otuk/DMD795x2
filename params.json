{"name":"Dmd795x2","tagline":"A simple game engine for a 8x8 dot matrix display using only 2 x 74HC795 driven by an arduino uno","body":"# DMD795x2\r\nA simple game engine for a 8x8 dot matrix display using only 2 x 74HC795 driven by an arduino uno\r\n\r\nThe library is available as a .zip library file with examples to be added to your arduino IDE at:\r\n[Library Repository](https://github.com/otuk/DMD795x2/)\r\n\r\n\r\n#What is this?\r\n1.  A simple C based game engine for arduino & dot matrix display\r\n2.  A platform for you to build an arduino based retro game or applications (3 different examples supplied)\r\n3.  A simple \"no hidden magic\" game engine for educational purposes\r\n\r\n#What do you need?\r\n1. Arduino (UNO is used, but any arduino will do)\r\n2. 2 x 74HC795 shift registers\r\n3. 1 8x8 dot matrix display ( 16 pinned monocolor type is used)\r\n4. 8 resistors appropriate to limit current to the dot matrix display you are using ( usually 220 - 470 Ohm will do)\r\n5. hookup wires & breadboard\r\n\r\n[ Some of the examples use a buzzer for game sound and a thumb-joystick or buttons will be needed for game control ]\r\n\r\n#Basic Wiring:\r\nIf you wired everything correctly you can run Simple_one_by_one_led  or Marquee examples included.\r\nRefer to https://github.com/otuk/DMD795x2/blob/master/DMD795x2_basic_wiring.png  for basic wiring.\r\n[[https://github.com/otuk/DMD795x2/blob/master/DMD795x2_basic_wiring.png]]\r\n\r\nyellow wires:  parallel data lines\r\n<br>blue wire:  serial data line to firs 74HC595\r\n<br>green wire:  serail data link from first to second 74HC595 \r\n<br>gray wire: serial clock\r\n<br>orange wire: latch/register-clock wire\r\n<br>red wire: 5V\r\n<br>white wire: GRD\r\n\r\n\r\n#How does it work?\r\nThe DMD795x2 library is a simple 2 file library.\r\n\r\nIn your game/application's setup() function you setup which 3 pins of arduino\r\nyou will use to communicate with the 74HC595 shift-registers.\r\n\r\nFor example;\r\n DMD_setup_ctl_pins(8, 12, 11); \r\n\r\nThat means:\r\n<br>Arduino (latchPin) pin 8   will be wired to  RCLK pin (pin#12) on 74HC595\r\n<br>Arduino (clockPin) pin 12 =>  SRCLK-serial clock of 595 (pin#11) on 74HC595\r\n<br>Arduino (dataPin) pin 11 => SER -serial input pin of 595 (pin#14) on 74HC595\r\n\r\n\r\nAnd  in a typical game loop, you are expected to update your game sprites/objects data including how they shd be drawn on display.\r\nAfter that you call the DMD_render_matrix() function to render display, and control frames per second with DMD_fps(int) function.\r\n\r\nYour typical arduino application/game will have a loop() function such as the following\r\n<br>update_the_game();  <= you implement this application/game specific method\r\n<br>DMD_render_matrix(); <= you just call this to display the latest state of game data\r\n<br>DMD_fps(30);  <= you can play with FramesPerSecond rate to adjust for best view\r\n\r\n#Important functions\r\n\r\na.  unsigned short one_led DMD_getpins(i,j) =>  gives you a unsigned short , that is the data to turn ON one led at row i and column j this is data ready to be added to the display data for that frame\r\n\r\nb.  void DMD_render_matrix knows how to display these.\r\n                                                \r\nc.  void DMD_reset_display_data()  =>  Simply tells DMD_render_matrix to remove/reset any existing display data\r\n\r\nd.  void DMD_add_display_data( &one_led, 1 )  =>  each game object usually will have more than one led to be turned ON for its display so you pass an array and/or you can add to the current display data before the DMD_render_matrix call for that frame.  First argument is a pointer to the value received from getpins call and second is the length of\r\n                                          \r\nThe library and example files have plenty of comments that will help you to code your application in no time for your Retro Fun.\r\n\r\nEnjoy!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}